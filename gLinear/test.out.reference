--------------------------------------------------
Testing RowVector
--------------------------------------------------
ctors
--------------------------------------------------
default ctor (no args)
vec.size(): 0 | 0

--------------------------------------------------
dtor
ctor specifying size (using placement new)
vec.size(): 25 | 25
initialize
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec.getRefs(): 1 | 1

--------------------------------------------------
copy ctor: vec2(vec)
vec2.size(): 25 | 25
vec, vec2:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec2.getRefs(): 2 | 2

--------------------------------------------------
creating and init'ing vec3 (offset 2)
vec, vec3:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
aliasing vec3: vec3.alias(vec): 
vec, vec3:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec.getRefs(): 3 | 3
vec3.getRefs(): 3 | 3
vec += 3:
vec, vec3
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
deepening vec3: vec3.deepen(): 
vec, vec3
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
vec -= 2, vec3 += 2
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
--------------------------------------------------
assignment: vector-vector
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
vec3 = vec
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
assignment: vector-scalar
vec3 = 3
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
--------------------------------------------------
vec: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
transpose: vectrans = vec.transpose()
vectrans.size(): 25 | 25
vec, vectrans:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec.getRefs(): 3 | 3
vectrans.getRefs(): 3 | 3
--------------------------------------------------
subranges and slices
--------------------------------------------------
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
iterating vector: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
vec.getRefs(): 1 | 1

--------------------------------------------------
subranging vec: 3:19
vecsub.size(): 17 | 17
vecsub:
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
iterating vecsub:
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 
vecsub.getRefs(): 2 | 2

--------------------------------------------------
slicing vec: 3:3:19
vecslice.size(): 6 | 6
vecslice:
3 6 9 12 15 18 
iterating vecslice
3 6 9 12 15 18 
18 15 12 9 6 3 
vecslice.getRefs(): 3 | 3

--------------------------------------------------
subranging vecslice: 1..4
vecsub2.size(): 4 | 4
vecsub2:
6 9 12 15 
iterating vecsub2
6 9 12 15 
15 12 9 6 
vecsub2.getRefs(): 4 | 4

--------------------------------------------------
slicing vecslice: 1:2:4
vecslice2.size(): 2 | 2
vecslice:
6 12 
iterating vecsclice
6 12 
12 6 
vecslice2.getRefs(): 5 | 5

nasty slicing
--------------------------------------------------
slice = slice
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
 13,17 -> 6,12
vec: 
0 1 2 3 4 5 6 7 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 

--------------------------------------------------
subrange = slice
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 
 2..7 -> 3:3:18
vec:
0 1 3 6 9 12 15 18 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 

--------------------------------------------------
slice = subrange
vec:
0 1 3 6 9 12 15 18 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 
 19:2:23 -> 8..10
vec:
0 1 3 6 9 12 15 18 8 9 10 11 12 6 14 15 16 12 18 8 20 9 22 10 24 

member operators & functions
--------------------------------------------------
vec, vec2
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
assignment: vector-vector
vec = vec2
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
--------------------------------------------------
assignment: vector-scalar
vec = 3:
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
scalar computed (+ - * /) assignment
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec += 1:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec -= 1:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec *= 2:
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 
vec /= 2:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vector computed (+ -) assignment
vec, vec2:
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 
vec += vec2:
8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 
vec -= vec2:
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
sum
vec: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec.sum(): 325 | 325
vec.sum2(): 5525 | 5525
unary vector operators
--------------------------------------------------
vec:, -vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 
--------------------------------------------------
global operators
--------------------------------------------------
vec-vec
equality and inequality
vec:, vec2: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
1 0 | 1 0
vec:, vec2: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
0 1 | 0 1
vec + vec2
3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 
vec - vec2
-3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 
--------------------------------------------------
vec-scalar
vec: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec + 2
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
vec - 2
-2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 
vec2 = vec * 4
0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 
vec2 / 2
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 
--------------------------------------------------
scalar-vec
vec: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
2 + vec
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
2 - vec
2 1 0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 
vec2 = 4 * vec
0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 
(vec = 4) / 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
vec:
(0,1) (1,2) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) (8,9) (9,10) 
conj(vec):
(0,-1) (1,-2) (2,-3) (3,-4) (4,-5) (5,-6) (6,-7) (7,-8) (8,-9) (9,-10) 
real(vec):
0 1 2 3 4 5 6 7 8 9 
imag(vec):
1 2 3 4 5 6 7 8 9 10 
abs(vec):
1 2.23607 3.60555 5 6.40312 7.81025 9.21954 10.6301 12.0416 13.4536 
arg(vec)
1.5708 1.10715 0.982794 0.927295 0.896055 0.876058 0.86217 0.851966 0.844154 0.837981 
norm(vec)
1 5 13 25 41 61 85 113 145 181 
cos(vec)
(1.54308,-0) (2.03272,-3.0519) (-4.18963,-9.10923) (-27.0349,-3.85115) (-48.5069,56.1572) (57.2191,193.428) (526.478,153.208) (1123.68,-979.225) (-589.5,-4008.43) (-10034.5,-4538.76) 
cosh(vec)
(0.540302,0) (-0.642148,1.06861) (-3.72455,0.511823) (-6.58066,-7.58155) (7.74631,-26.169) (71.2542,-20.7335) (152.074,132.523) (-79.7801,542.481) (-1358.02,614.254) (-3399.53,-2204.12) 
sin(vec)
(0,1.1752) (3.16578,1.9596) (9.1545,-4.16891) (3.85374,-27.0168) (-56.1623,-48.5025) (-193.43,57.2184) (-153.208,526.477) (979.225,1123.68) (4008.43,-589.5) (4538.76,-10034.5) 
sinh(vec)
(0,0.841471) (-0.489056,1.40312) (-3.59056,0.530921) (-6.54812,-7.61923) (7.74112,-26.1865) (71.2477,-20.7354) (152.072,132.524) (-79.78,542.482) (-1358.02,614.254) (-3399.53,-2204.12) 
exp(vec)
(0.540302,0.841471) (-1.1312,2.47173) (-7.31511,1.04274) (-13.1288,-15.2008) (15.4874,-52.3555) (142.502,-41.4689) (304.146,265.047) (-159.56,1084.96) (-2716.04,1228.51) (-6799.07,-4408.25) 
log(vec)
(0,1.5708) (0.804719,1.10715) (1.28247,0.982794) (1.60944,0.927295) (1.85679,0.896055) (2.05544,0.876058) (2.22133,0.86217) (2.36369,0.851966) (2.48837,0.844154) (2.59925,0.837981) 
sqrt(vec)
(0.707107,0.707107) (1.27202,0.786151) (1.67415,0.895977) (2,1) (2.28069,1.09616) (2.53083,1.18538) (2.75858,1.26877) (2.96902,1.34725) (3.16556,1.42155) (3.35064,1.49225) 
step(real(vec))
0 1 1 1 1 1 1 1 1 1 
impulse(real(vec))
1 0 0 0 0 0 0 0 0 0 
--------------------------------------------------
Testing ColVector
--------------------------------------------------
ctors
--------------------------------------------------
default ctor (no args)
vec.size(): 0 | 0

--------------------------------------------------
dtor
ctor specifying size (using placement new)
vec.size(): 25 | 25
initialize
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec.getRefs(): 1 | 1

--------------------------------------------------
copy ctor: vec2(vec)
vec2.size(): 25 | 25
vec, vec2:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec2.getRefs(): 2 | 2

--------------------------------------------------
creating and init'ing vec3 (offset 2)
vec, vec3:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
aliasing vec3: vec3.alias(vec): 
vec, vec3:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec.getRefs(): 3 | 3
vec3.getRefs(): 3 | 3
vec += 3:
vec, vec3
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
deepening vec3: vec3.deepen(): 
vec, vec3
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
vec -= 2, vec3 += 2
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
--------------------------------------------------
assignment: vector-vector
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
vec3 = vec
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
assignment: vector-scalar
vec3 = 3
vec, vec3
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
vec.getRefs(): 2 | 2
vec3.getRefs(): 1 | 1
--------------------------------------------------
vec: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
transpose: vectrans = vec.transpose()
vectrans.size(): 25 | 25
vec, vectrans:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec.getRefs(): 3 | 3
vectrans.getRefs(): 3 | 3
--------------------------------------------------
subranges and slices
--------------------------------------------------
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
iterating vector: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
vec.getRefs(): 1 | 1

--------------------------------------------------
subranging vec: 3:19
vecsub.size(): 17 | 17
vecsub:
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
iterating vecsub:
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 
vecsub.getRefs(): 2 | 2

--------------------------------------------------
slicing vec: 3:3:19
vecslice.size(): 6 | 6
vecslice:
3 6 9 12 15 18 
iterating vecslice
3 6 9 12 15 18 
18 15 12 9 6 3 
vecslice.getRefs(): 3 | 3

--------------------------------------------------
subranging vecslice: 1..4
vecsub2.size(): 4 | 4
vecsub2:
6 9 12 15 
iterating vecsub2
6 9 12 15 
15 12 9 6 
vecsub2.getRefs(): 4 | 4

--------------------------------------------------
slicing vecslice: 1:2:4
vecslice2.size(): 2 | 2
vecslice:
6 12 
iterating vecsclice
6 12 
12 6 
vecslice2.getRefs(): 5 | 5

nasty slicing
--------------------------------------------------
slice = slice
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
 13,17 -> 6,12
vec: 
0 1 2 3 4 5 6 7 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 

--------------------------------------------------
subrange = slice
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 
 2..7 -> 3:3:18
vec:
0 1 3 6 9 12 15 18 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 

--------------------------------------------------
slice = subrange
vec:
0 1 3 6 9 12 15 18 8 9 10 11 12 6 14 15 16 12 18 19 20 21 22 23 24 
 19:2:23 -> 8..10
vec:
0 1 3 6 9 12 15 18 8 9 10 11 12 6 14 15 16 12 18 8 20 9 22 10 24 

member operators & functions
--------------------------------------------------
vec, vec2
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
assignment: vector-vector
vec = vec2
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
--------------------------------------------------
assignment: vector-scalar
vec = 3:
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
scalar computed (+ - * /) assignment
vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec += 1:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec -= 1:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec *= 2:
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 
vec /= 2:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vector computed (+ -) assignment
vec, vec2:
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 
vec += vec2:
8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 
vec -= vec2:
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
sum
vec: 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
vec.sum(): 325 | 325
vec.sum2(): 5525 | 5525
unary vector operators
--------------------------------------------------
vec:, -vec:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 
--------------------------------------------------
global operators
--------------------------------------------------
vec-vec
equality and inequality
vec:, vec2: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
1 0 | 1 0
vec:, vec2: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
0 1 | 0 1
vec + vec2
3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 
vec - vec2
-3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 
--------------------------------------------------
vec-scalar
vec: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
vec + 2
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
vec - 2
-2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 
vec2 = vec * 4
0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 
vec2 / 2
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 
--------------------------------------------------
scalar-vec
vec: 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
2 + vec
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
2 - vec
2 1 0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 
vec2 = 4 * vec
0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 
(vec = 4) / 2
2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 
Testing RowVector and ColVector
Testing vector-vector dotproduct
--------------------------------------------------
DENSE - DENSE
--------------------------------------------------
rv, cv
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
rv * cv
5850 | 5850
rv * rv.transpose()
5525 | 5525
cv.tranpose() * cv
6200 | 6200
--------------------------------------------------
--------------------------------------------------
SLICE - SLICE
--------------------------------------------------
rvs, cvs
1 3 5 7 9 11 13 15 17 19 21 23 25 
2 4 6 8 10 12 14 16 18 20 22 24 26 
rvs * cvs
3094 | 3094
rvs * rvs.transpose()
2925 | 2925
cvs.tranpose() * cvs
3276 | 3276
--------------------------------------------------
--------------------------------------------------
DENSE - SLICE
--------------------------------------------------
rvds, cvs
1 2 3 4 5 6 7 8 9 10 11 12 13 
2 4 6 8 10 12 14 16 18 20 22 24 26 
rvds * cvs
1638 | 1638
--------------------------------------------------
SLICE - DENSE
--------------------------------------------------
rvs, cvds
1 3 5 7 9 11 13 15 17 19 21 23 25 
2 3 4 5 6 7 8 9 10 11 12 13 14 
rvs * cvds
1716 | 1716
--------------------------------------------------
--------------------------------------------------
Testing Matrix<ROW_DENSE>
--------------------------------------------------
ctors
--------------------------------------------------
default ctor (no args)
[mat.rows() x mat.cols()]: [ 0 x 0 ] | [ 0 x 0 ]
--------------------------------------------------
dtor
ctor specifying size (using placement new)
[mat.rows() x mat.cols()]: [ 4 x 5 ] | [ 4 x 5 ]
initialize
mat:
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

mat.getRefs(): 1 | 1

--------------------------------------------------
copy ctor: mat2(mat)
[mat2.rows() x mat2.cols()]: [ 4 x 5 ] | [ 4 x 5 ]
mat, mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

mat2.getRefs(): 2 | 2

--------------------------------------------------
creating and init'ing mat3 (offset 2)
mat, mat3
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

2 3 4 5 6 
7 8 9 10 11 
12 13 14 15 16 
17 18 19 20 21 

aliasing mat3: mat3.alias(mat):
mat, mat3
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

mat.getRefs(): 3 | 3
mat3.getRefs(): 3 | 3
mat += 3:
mat, mat3
3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

deepening mat3: mat3.deepen(): 
mat, mat3
3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
mat -= 2, mat3 += 2
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 
20 21 22 23 24 

--------------------------------------------------
assignment: matrix-matrix
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 
20 21 22 23 24 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
mat3 = mat
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
assignment: matrix-scalar
mat3 = 3
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

3 3 3 3 3 
3 3 3 3 3 
3 3 3 3 3 
3 3 3 3 3 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
--------------------------------------------------
mat: 
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

transpose: mattrans = mat.transpose()
[mattrans.rows() x mattrans.cols()]: [ 5 x 4 ] | [ 5 x 4 ]
mat, mattrans:
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

1 6 11 16 
2 7 12 17 
3 8 13 18 
4 9 14 19 
5 10 15 20 

mat.getRefs(): 3 | 3
mattrans.getRefs(): 3 | 3
--------------------------------------------------
subranges and slices
--------------------------------------------------
mat:
0 1 2 3 4 5 6 7 8 9 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 
70 71 72 73 74 75 76 77 78 79 

iterating matrix:
0 1 2 3 4 5 6 7 8 9 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 
70 71 72 73 74 75 76 77 78 79 
0 10 20 30 40 50 60 70 
1 11 21 31 41 51 61 71 
2 12 22 32 42 52 62 72 
3 13 23 33 43 53 63 73 
4 14 24 34 44 54 64 74 
5 15 25 35 45 55 65 75 
6 16 26 36 46 56 66 76 
7 17 27 37 47 57 67 77 
8 18 28 38 48 58 68 78 
9 19 29 39 49 59 69 79 
mat.getRefs(): 1 | 1

--------------------------------------------------
subranging matrix rows: [1:6,:]
[matrowsub.rows() x matrowsub.cols()]: [ 6 x 10 ] | [ 6 x 10 ]
matrowsub: 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 

iterating matrowsub: 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 
10 20 30 40 50 60 
11 21 31 41 51 61 
12 22 32 42 52 62 
13 23 33 43 53 63 
14 24 34 44 54 64 
15 25 35 45 55 65 
16 26 36 46 56 66 
17 27 37 47 57 67 
18 28 38 48 58 68 
19 29 39 49 59 69 
matrowsub.getRefs(): 2 | 2

subranging matrix colunms: [:,2:8]
[matcolsub.rows() x matcolsub.cols()]: [ 8 x 7 ] | [ 8 x 7 ]
matcolsub: 
2 3 4 5 6 7 8 
12 13 14 15 16 17 18 
22 23 24 25 26 27 28 
32 33 34 35 36 37 38 
42 43 44 45 46 47 48 
52 53 54 55 56 57 58 
62 63 64 65 66 67 68 
72 73 74 75 76 77 78 

iterating matcolsub: 
2 3 4 5 6 7 8 
12 13 14 15 16 17 18 
22 23 24 25 26 27 28 
32 33 34 35 36 37 38 
42 43 44 45 46 47 48 
52 53 54 55 56 57 58 
62 63 64 65 66 67 68 
72 73 74 75 76 77 78 
2 12 22 32 42 52 62 72 
3 13 23 33 43 53 63 73 
4 14 24 34 44 54 64 74 
5 15 25 35 45 55 65 75 
6 16 26 36 46 56 66 76 
7 17 27 37 47 57 67 77 
8 18 28 38 48 58 68 78 
matcolsub.getRefs(): 3 | 3

slicing matrix: [1:2:6,2:3:8]
[matslice.rows() x matslice.cols()]: [ 3 x 3 ] | [ 3 x 3 ]
matslice:
12 15 18 
32 35 38 
52 55 58 

iterating matslice
12 15 18 
32 35 38 
52 55 58 
12 32 52 
15 35 55 
18 38 58 
matslice.getRefs(): 4 | 4

--------------------------------------------------
Matrix operators and functions
--------------------------------------------------
Unary minus
mat, -mat
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 -1 -2 -3 -4 
-5 -6 -7 -8 -9 
-10 -11 -12 -13 -14 
-15 -16 -17 -18 -19 

Ones
1 1 1 1 1 
1 1 1 1 1 
1 1 1 1 1 
1 1 1 1 1 

Zeros
0 0 0 0 0 
0 0 0 0 0 
0 0 0 0 0 
0 0 0 0 0 

Identity matrix
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 

1 0 0 0 
0 1 0 0 
0 0 1 0 
0 0 0 1 
0 0 0 0 

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 

Diagonal matrix from vector
1 0 0 0 0 
0 2 0 0 0 
0 0 3 0 0 
0 0 0 4 0 
0 0 0 0 5 

1 0 0 0 0 
0 2 0 0 0 
0 0 3 0 0 
0 0 0 4 0 
0 0 0 0 5 

Outer product
vec, vec2
0 1 2 3 4 
0 1 2 3 
vec2.transpose() * vec
0 0 0 0 0 
0 1 2 3 4 
0 2 4 6 8 
0 3 6 9 12 

Equality and inequality operator
mat, mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 0 | 1 0
mat, mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

0 1 | 0 1
mat + mat2
1 3 5 7 9 
11 13 15 17 19 
21 23 25 27 29 
31 33 35 37 39 

mat - mat2
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 

mat * mat2.transpose()
40 90 140 190 
115 290 465 640 
190 490 790 1090 
265 690 1115 1540 

(mat * mat2.transpose()).transpose() == (mat2 * mat.transpose())
1
mat += mat2
mat:
1 3 5 7 9 
11 13 15 17 19 
21 23 25 27 29 
31 33 35 37 39 

mat -= mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

matrix - colvector multiply
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 2 3 4 5 
40 115 190 265 
rowvector - matrix multiply
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 2 3 4 
100 110 120 130 140 
mat:
1 2 
3 4 

mat + 2
3 4 
5 6 

mat - 2
-1 0 
1 2 

mat * 2
2 4 
6 8 

mat / 2
0 1 
1 2 

2 + mat
3 4 
5 6 

2 - mat
1 0 
-1 -2 

2 * mat
2 4 
6 8 

10 / mat
10 5 
3 2 

mat:
1 2 
3 4 

mat += 8
9 10 
11 12 

mat -= 6
3 4 
5 6 

mat *= 4
12 16 
20 24 

mat /= 3
4 5 
6 8 

mat:
(0,1) (1,2) (2,3) (3,4) 
(4,5) (5,6) (6,7) (7,8) 
(8,9) (9,10) (10,11) (11,12) 

conj(mat):
(0,-1) (1,-2) (2,-3) (3,-4) 
(4,-5) (5,-6) (6,-7) (7,-8) 
(8,-9) (9,-10) (10,-11) (11,-12) 

real(mat):
0 1 2 3 
4 5 6 7 
8 9 10 11 

imag(mat):
1 2 3 4 
5 6 7 8 
9 10 11 12 

abs(mat):
1 2.23607 3.60555 5 
6.40312 7.81025 9.21954 10.6301 
12.0416 13.4536 14.8661 16.2788 

arg(mat)
1.5708 1.10715 0.982794 0.927295 
0.896055 0.876058 0.86217 0.851966 
0.844154 0.837981 0.832981 0.828849 

norm(mat)
1 5 13 25 
41 61 85 113 
145 181 221 265 

cos(mat)
(1.54308,-0) (2.03272,-3.0519) (-4.18963,-9.10923) (-27.0349,-3.85115) 
(-48.5069,56.1572) (57.2191,193.428) (526.478,153.208) (1123.68,-979.225) 
(-589.5,-4008.43) (-10034.5,-4538.76) (-25119.3,16286.4) (360.152,81376.6) 

cosh(mat)
(0.540302,0) (-0.642148,1.06861) (-3.72455,0.511823) (-6.58066,-7.58155) 
(7.74631,-26.169) (71.2542,-20.7335) (152.074,132.523) (-79.7801,542.481) 
(-1358.02,614.254) (-3399.53,-2204.12) (48.7412,-11013.1) (25262.5,-16063.4) 

sin(mat)
(0,1.1752) (3.16578,1.9596) (9.1545,-4.16891) (3.85374,-27.0168) 
(-56.1623,-48.5025) (-193.43,57.2184) (-153.208,526.477) (979.225,1123.68) 
(4008.43,-589.5) (4538.76,-10034.5) (-16286.4,-25119.3) (-81376.6,360.152) 

sinh(mat)
(0,0.841471) (-0.489056,1.40312) (-3.59056,0.530921) (-6.54812,-7.61923) 
(7.74112,-26.1865) (71.2477,-20.7354) (152.072,132.524) (-79.78,542.482) 
(-1358.02,614.254) (-3399.53,-2204.12) (48.7412,-11013.1) (25262.5,-16063.4) 

exp(mat)
(0.540302,0.841471) (-1.1312,2.47173) (-7.31511,1.04274) (-13.1288,-15.2008) 
(15.4874,-52.3555) (142.502,-41.4689) (304.146,265.047) (-159.56,1084.96) 
(-2716.04,1228.51) (-6799.07,-4408.25) (97.4825,-22026.2) (50525,-32126.8) 

log(mat)
(0,1.5708) (0.804719,1.10715) (1.28247,0.982794) (1.60944,0.927295) 
(1.85679,0.896055) (2.05544,0.876058) (2.22133,0.86217) (2.36369,0.851966) 
(2.48837,0.844154) (2.59925,0.837981) (2.69908,0.832981) (2.78986,0.828849) 

sqrt(mat)
(0.707107,0.707107) (1.27202,0.786151) (1.67415,0.895977) (2,1) 
(2.28069,1.09616) (2.53083,1.18538) (2.75858,1.26877) (2.96902,1.34725) 
(3.16556,1.42155) (3.35064,1.49225) (3.52605,1.55982) (3.69316,1.62463) 

step(real(mat))
0 1 1 1 
1 1 1 1 
1 1 1 1 

impulse(real(mat))
1 0 0 0 
0 0 0 0 
0 0 0 0 

Testing Matrix<COL_DENSE>
--------------------------------------------------
ctors
--------------------------------------------------
default ctor (no args)
[mat.rows() x mat.cols()]: [ 0 x 0 ] | [ 0 x 0 ]
--------------------------------------------------
dtor
ctor specifying size (using placement new)
[mat.rows() x mat.cols()]: [ 4 x 5 ] | [ 4 x 5 ]
initialize
mat:
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

mat.getRefs(): 1 | 1

--------------------------------------------------
copy ctor: mat2(mat)
[mat2.rows() x mat2.cols()]: [ 4 x 5 ] | [ 4 x 5 ]
mat, mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

mat2.getRefs(): 2 | 2

--------------------------------------------------
creating and init'ing mat3 (offset 2)
mat, mat3
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

2 3 4 5 6 
7 8 9 10 11 
12 13 14 15 16 
17 18 19 20 21 

aliasing mat3: mat3.alias(mat):
mat, mat3
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

mat.getRefs(): 3 | 3
mat3.getRefs(): 3 | 3
mat += 3:
mat, mat3
3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

deepening mat3: mat3.deepen(): 
mat, mat3
3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

3 4 5 6 7 
8 9 10 11 12 
13 14 15 16 17 
18 19 20 21 22 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
mat -= 2, mat3 += 2
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 
20 21 22 23 24 

--------------------------------------------------
assignment: matrix-matrix
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 
20 21 22 23 24 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
mat3 = mat
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
assignment: matrix-scalar
mat3 = 3
mat, mat3
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

3 3 3 3 3 
3 3 3 3 3 
3 3 3 3 3 
3 3 3 3 3 

mat.getRefs(): 2 | 2
mat3.getRefs(): 1 | 1
--------------------------------------------------
mat: 
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

transpose: mattrans = mat.transpose()
[mattrans.rows() x mattrans.cols()]: [ 5 x 4 ] | [ 5 x 4 ]
mat, mattrans:
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

1 6 11 16 
2 7 12 17 
3 8 13 18 
4 9 14 19 
5 10 15 20 

mat.getRefs(): 3 | 3
mattrans.getRefs(): 3 | 3
--------------------------------------------------
subranges and slices
--------------------------------------------------
mat:
0 1 2 3 4 5 6 7 8 9 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 
70 71 72 73 74 75 76 77 78 79 

iterating matrix:
0 1 2 3 4 5 6 7 8 9 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 
70 71 72 73 74 75 76 77 78 79 
0 10 20 30 40 50 60 70 
1 11 21 31 41 51 61 71 
2 12 22 32 42 52 62 72 
3 13 23 33 43 53 63 73 
4 14 24 34 44 54 64 74 
5 15 25 35 45 55 65 75 
6 16 26 36 46 56 66 76 
7 17 27 37 47 57 67 77 
8 18 28 38 48 58 68 78 
9 19 29 39 49 59 69 79 
mat.getRefs(): 1 | 1

--------------------------------------------------
subranging matrix rows: [1:6,:]
[matrowsub.rows() x matrowsub.cols()]: [ 6 x 10 ] | [ 6 x 10 ]
matrowsub: 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 

iterating matrowsub: 
10 11 12 13 14 15 16 17 18 19 
20 21 22 23 24 25 26 27 28 29 
30 31 32 33 34 35 36 37 38 39 
40 41 42 43 44 45 46 47 48 49 
50 51 52 53 54 55 56 57 58 59 
60 61 62 63 64 65 66 67 68 69 
10 20 30 40 50 60 
11 21 31 41 51 61 
12 22 32 42 52 62 
13 23 33 43 53 63 
14 24 34 44 54 64 
15 25 35 45 55 65 
16 26 36 46 56 66 
17 27 37 47 57 67 
18 28 38 48 58 68 
19 29 39 49 59 69 
matrowsub.getRefs(): 2 | 2

subranging matrix colunms: [:,2:8]
[matcolsub.rows() x matcolsub.cols()]: [ 8 x 7 ] | [ 8 x 7 ]
matcolsub: 
2 3 4 5 6 7 8 
12 13 14 15 16 17 18 
22 23 24 25 26 27 28 
32 33 34 35 36 37 38 
42 43 44 45 46 47 48 
52 53 54 55 56 57 58 
62 63 64 65 66 67 68 
72 73 74 75 76 77 78 

iterating matcolsub: 
2 3 4 5 6 7 8 
12 13 14 15 16 17 18 
22 23 24 25 26 27 28 
32 33 34 35 36 37 38 
42 43 44 45 46 47 48 
52 53 54 55 56 57 58 
62 63 64 65 66 67 68 
72 73 74 75 76 77 78 
2 12 22 32 42 52 62 72 
3 13 23 33 43 53 63 73 
4 14 24 34 44 54 64 74 
5 15 25 35 45 55 65 75 
6 16 26 36 46 56 66 76 
7 17 27 37 47 57 67 77 
8 18 28 38 48 58 68 78 
matcolsub.getRefs(): 3 | 3

slicing matrix: [1:2:6,2:3:8]
[matslice.rows() x matslice.cols()]: [ 3 x 3 ] | [ 3 x 3 ]
matslice:
12 15 18 
32 35 38 
52 55 58 

iterating matslice
12 15 18 
32 35 38 
52 55 58 
12 32 52 
15 35 55 
18 38 58 
matslice.getRefs(): 4 | 4

--------------------------------------------------
Matrix operators and functions
--------------------------------------------------
Unary minus
mat, -mat
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 -1 -2 -3 -4 
-5 -6 -7 -8 -9 
-10 -11 -12 -13 -14 
-15 -16 -17 -18 -19 

Ones
1 1 1 1 1 
1 1 1 1 1 
1 1 1 1 1 
1 1 1 1 1 

Zeros
0 0 0 0 0 
0 0 0 0 0 
0 0 0 0 0 
0 0 0 0 0 

Identity matrix
1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 

1 0 0 0 
0 1 0 0 
0 0 1 0 
0 0 0 1 
0 0 0 0 

1 0 0 0 0 
0 1 0 0 0 
0 0 1 0 0 
0 0 0 1 0 
0 0 0 0 1 

Diagonal matrix from vector
1 0 0 0 0 
0 2 0 0 0 
0 0 3 0 0 
0 0 0 4 0 
0 0 0 0 5 

1 0 0 0 0 
0 2 0 0 0 
0 0 3 0 0 
0 0 0 4 0 
0 0 0 0 5 

Outer product
vec, vec2
0 1 2 3 4 
0 1 2 3 
vec2.transpose() * vec
0 0 0 0 0 
0 1 2 3 4 
0 2 4 6 8 
0 3 6 9 12 

Equality and inequality operator
mat, mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 0 | 1 0
mat, mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 

0 1 | 0 1
mat + mat2
1 3 5 7 9 
11 13 15 17 19 
21 23 25 27 29 
31 33 35 37 39 

mat - mat2
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 

mat * mat2.transpose()
40 90 140 190 
115 290 465 640 
190 490 790 1090 
265 690 1115 1540 

(mat * mat2.transpose()).transpose() == (mat2 * mat.transpose())
1
mat += mat2
mat:
1 3 5 7 9 
11 13 15 17 19 
21 23 25 27 29 
31 33 35 37 39 

mat -= mat2
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

matrix - colvector multiply
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 2 3 4 5 
40 115 190 265 
rowvector - matrix multiply
0 1 2 3 4 
5 6 7 8 9 
10 11 12 13 14 
15 16 17 18 19 

1 2 3 4 
100 110 120 130 140 
mat:
1 2 
3 4 

mat + 2
3 4 
5 6 

mat - 2
-1 0 
1 2 

mat * 2
2 4 
6 8 

mat / 2
0 1 
1 2 

2 + mat
3 4 
5 6 

2 - mat
1 0 
-1 -2 

2 * mat
2 4 
6 8 

10 / mat
10 5 
3 2 

mat:
1 2 
3 4 

mat += 8
9 10 
11 12 

mat -= 6
3 4 
5 6 

mat *= 4
12 16 
20 24 

mat /= 3
4 5 
6 8 

mat:
(0,1) (1,2) (2,3) (3,4) 
(4,5) (5,6) (6,7) (7,8) 
(8,9) (9,10) (10,11) (11,12) 

conj(mat):
(0,-1) (1,-2) (2,-3) (3,-4) 
(4,-5) (5,-6) (6,-7) (7,-8) 
(8,-9) (9,-10) (10,-11) (11,-12) 

real(mat):
0 1 2 3 
4 5 6 7 
8 9 10 11 

imag(mat):
1 2 3 4 
5 6 7 8 
9 10 11 12 

abs(mat):
1 2.23607 3.60555 5 
6.40312 7.81025 9.21954 10.6301 
12.0416 13.4536 14.8661 16.2788 

arg(mat)
1.5708 1.10715 0.982794 0.927295 
0.896055 0.876058 0.86217 0.851966 
0.844154 0.837981 0.832981 0.828849 

norm(mat)
1 5 13 25 
41 61 85 113 
145 181 221 265 

cos(mat)
(1.54308,-0) (2.03272,-3.0519) (-4.18963,-9.10923) (-27.0349,-3.85115) 
(-48.5069,56.1572) (57.2191,193.428) (526.478,153.208) (1123.68,-979.225) 
(-589.5,-4008.43) (-10034.5,-4538.76) (-25119.3,16286.4) (360.152,81376.6) 

cosh(mat)
(0.540302,0) (-0.642148,1.06861) (-3.72455,0.511823) (-6.58066,-7.58155) 
(7.74631,-26.169) (71.2542,-20.7335) (152.074,132.523) (-79.7801,542.481) 
(-1358.02,614.254) (-3399.53,-2204.12) (48.7412,-11013.1) (25262.5,-16063.4) 

sin(mat)
(0,1.1752) (3.16578,1.9596) (9.1545,-4.16891) (3.85374,-27.0168) 
(-56.1623,-48.5025) (-193.43,57.2184) (-153.208,526.477) (979.225,1123.68) 
(4008.43,-589.5) (4538.76,-10034.5) (-16286.4,-25119.3) (-81376.6,360.152) 

sinh(mat)
(0,0.841471) (-0.489056,1.40312) (-3.59056,0.530921) (-6.54812,-7.61923) 
(7.74112,-26.1865) (71.2477,-20.7354) (152.072,132.524) (-79.78,542.482) 
(-1358.02,614.254) (-3399.53,-2204.12) (48.7412,-11013.1) (25262.5,-16063.4) 

exp(mat)
(0.540302,0.841471) (-1.1312,2.47173) (-7.31511,1.04274) (-13.1288,-15.2008) 
(15.4874,-52.3555) (142.502,-41.4689) (304.146,265.047) (-159.56,1084.96) 
(-2716.04,1228.51) (-6799.07,-4408.25) (97.4825,-22026.2) (50525,-32126.8) 

log(mat)
(0,1.5708) (0.804719,1.10715) (1.28247,0.982794) (1.60944,0.927295) 
(1.85679,0.896055) (2.05544,0.876058) (2.22133,0.86217) (2.36369,0.851966) 
(2.48837,0.844154) (2.59925,0.837981) (2.69908,0.832981) (2.78986,0.828849) 

sqrt(mat)
(0.707107,0.707107) (1.27202,0.786151) (1.67415,0.895977) (2,1) 
(2.28069,1.09616) (2.53083,1.18538) (2.75858,1.26877) (2.96902,1.34725) 
(3.16556,1.42155) (3.35064,1.49225) (3.52605,1.55982) (3.69316,1.62463) 

step(real(mat))
0 1 1 1 
1 1 1 1 
1 1 1 1 

impulse(real(mat))
1 0 0 0 
0 0 0 0 
0 0 0 0 

Testing Lapack
a:
2 1 1 
1 2 1 
1 1 2 

inv(a):
0.75 -0.25 -0.25 
-0.25 0.75 -0.25 
-0.25 -0.25 0.75 

eig(a).vectors())
(0.816497,0) (0.57735,0) (-0.195078,0) 
(-0.408248,0) (0.57735,-0) (0.784167,0) 
(-0.408248,0) (0.57735,0) (-0.58909,0) 

eig(a).values())
(1,0) (0,0) (0,0) 
(0,0) (4,0) (0,0) 
(0,0) (0,0) (1,0) 

